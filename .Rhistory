df <- merge(best_config,all_locs)
df$full_sib <- paste(df$MotherID,df$FatherID,sep = "_")
##splitting pedigrees by collection and length cluster
#BMR 2018
bmr18.1 <- subset(df,df$samp == "BMR_2018" & df$clust == "clust1")
bmr18.1$cohort <- "2016"
bmr18.2 <- subset(df,df$samp == "BMR_2018" & df$clust == "clust2")
bmr18.2$cohort <- "2015"
bmr18.3 <- subset(df,df$samp == "BMR_2018" & df$clust == "clust3")
bmr18.3$cohort <- "2014"
bmr18 <- rbind(bmr18.1,bmr18.2,bmr18.3)
#BMR 2017
bmr17.1 <- subset(df,df$samp == "BMR_2017" & df$clust == "clust1")
bmr17.1$cohort <- "2016"
bmr17.2 <- subset(df,df$samp == "BMR_2017" & df$clust == "clust2")
bmr17.2$cohort <- "2015"
bmr17 <- rbind(bmr17.1,bmr17.2)
bmr <- rbind(bmr17,bmr18)
bmr19 <- subset(df,df$samp == "BMR_2019")
ocq <- subset(df,df$samp == "OCQ_2018")
che <- subset(df,df$samp == "CHE_2018")
chePR <- che[che$Sample_number < 542 | che$Sample_number == 544,]
##quantifying family relationships across clusters
#BMR 18
#testing overlap
table(bmr18$ClusterIndex)
table(bmr18.1$ClusterIndex%in%bmr18.2$ClusterIndex)
table(bmr18.1$ClusterIndex%in%bmr18.3$ClusterIndex)
table(bmr18.2$ClusterIndex%in%bmr18.3$ClusterIndex)
bmr_sing <- bmr18.1[!(bmr18.1$ClusterIndex %in% bmr18.2$ClusterIndex),]
bmr_sing <- rbind(bmr_sing,bmr18[bmr18$ClusterIndex %in% bmr_sing$ClusterIndex,])
#comparing families
table(bmr18.1$ClusterIndex)
table(bmr18.2$ClusterIndex)
table(bmr18.3$ClusterIndex)
ggplot(bmr18,aes(x=ClusterIndex,y=Length,color=cohort))+
geom_point()+theme_bw()
ggplot(bmr18,aes(x=full_sib,y=Length,color=cohort))+
geom_point()+theme_bw()
#compare full-sibling groups
table(bmr18$full_sib)
table(bmr18.1$full_sib)
table(bmr18.2$full_sib)
table(bmr18.3$full_sib)
table(bmr18.1$full_sib%in%bmr18.2$full_sib)
table(bmr18.1$full_sib%in%bmr18.3$full_sib)
table(bmr18.3$full_sib%in%bmr18.2$full_sib)
#BMR 17
#testing overlap
table(bmr17$ClusterIndex)
table(bmr17.1$ClusterIndex%in%bmr17.2$ClusterIndex)
table(bmr17.2$ClusterIndex%in%bmr17.1$ClusterIndex)
bmr_sing <- bmr17.1[!(bmr17.1$ClusterIndex %in% bmr17.2$ClusterIndex),]
#comparing families
table(bmr17.1$ClusterIndex)
table(bmr17.2$ClusterIndex)
ggplot(bmr17,aes(x=ClusterIndex,y=Length,color=cohort))+
geom_point()+theme_bw()
ggplot(bmr17,aes(x=full_sib,y=Length,color=cohort))+
geom_point()+theme_bw()
#compare full-sibling groups
table(bmr17$full_sib)
table(bmr17.1$full_sib)
table(bmr17.2$full_sib)
table(bmr17.1$full_sib%in%bmr17.2$full_sib)
table(bmr17.2$full_sib%in%bmr17.1$full_sib)
#comparing between collections
table(bmr17.1$ClusterIndex%in%bmr18.1$ClusterIndex)
table(bmr17.1$ClusterIndex%in%bmr18.2$ClusterIndex)
table(bmr17.1$ClusterIndex%in%bmr18.3$ClusterIndex)
#generate cohort sets
bmr_cohort16 <- bmr[which(bmr$ClusterIndex == "2" | bmr$ClusterIndex == "3" | bmr$ClusterIndex == "13"),]
bmr_cohort16$newcohort <- "BMR_2016"
bmr_cohort15 <- bmr[which(!(bmr$OffspringID %in% bmr_cohort16$OffspringID)),]
bmr_cohort15$newcohort <- "BMR_2015"
#combining all locations into one data frame
#!# only chePR individuals are included because the others were not used in the analysis
ocq$newcohort <- "OCQ16"
ocq$cohort <- "2016"
chePR$newcohort <- "chePR"
chePR$cohort <- "2016"
bmr19$newcohort <- "BMRal"
bmr19$cohort <- "2015"
length(unique(ocq$full_sib))
#load libraries
library(tidyverse)
#load homebrew functions
source("Homebrew/multiplot.R")
#load best cluster data
bmr_clust <- read.table(file = "Software_outputs/BMR_Output.data.BestCluster",header = T, sep = "\t",stringsAsFactors = F)
ocq_clust <- read.table(file = "Software_outputs/OCQ_Output.data.BestCluster",header = T, sep = "\t",stringsAsFactors = F)
load("Aging_Models/Family_data_all_locations.rda")
all_families <- all_families %>% select(-FatherID:-ClusterIndex)
clust_all <- rbind(ocq_clust,bmr_clust)
clust_all1 <- all_families %>% full_join(clust_all,by = c("OffspringID"))
#Black Mallard
bmr1 <- clust_all1 %>%
filter(samp == "BMR_2017" | samp == "BMR_2018" | samp == "BMR_2019")
give.n <- function(x){
return(c(y = max(x)*1.08, label = length(x)))
# experiment with the multiplier to find the perfect position
}
collect.labs <- c("2017 Collection","2018 Collection","2019 Collection")
names(collect.labs) <- c("BMR_2017", "BMR_2018", "BMR_2019")
bmr_plot <- ggplot(bmr1,aes(x=ClusterIndex,group=ClusterIndex,y=Length,fill=Probability))+
facet_wrap(vars(samp),labeller =labeller(samp=collect.labs))+
stat_summary(fun.data = give.n, geom = "text", fun = median,
position = position_dodge(width = 0.75),size = 2)+
geom_boxplot(alpha=0.3)+
theme_bw()+
scale_fill_gradient(low="red", high="white",name = "Cluster \nProbability")+
xlab("Family Cluster")+
ylab("Length (mm)")+
ggtitle("A) Black Mallard River")
#Ocqueoc
ocq1 <- clust_all1 %>%
filter(loc == "OCQ")
collect.labs <- c("2018 Collection")
names(collect.labs) <- c("OCQ_2018")
ocq_plot <- ggplot(ocq1,aes(x=ClusterIndex,group=ClusterIndex,y=Length,fill=Probability))+
facet_wrap(vars(samp),labeller =labeller(samp=collect.labs))+
stat_summary(fun.data = give.n, geom = "text", fun = median,
position = position_dodge(width = 0.75),size = 2)+
geom_boxplot(alpha=0.3)+
theme_bw()+
scale_fill_gradient(low="red", high="white",name = "Cluster \nProbability")+
xlab("Family Cluster")+
ylab("Length (mm)")+
ggtitle("B) Ocqueoc River")
multiplot(cols = 1,bmr_plot,ocq_plot)
#putting plots together
tiff(filename = "Figures/Length_Boxplots_prob.tiff",height = 8,width = 8,units = "in",res = 200)
multiplot(cols = 1,bmr_plot,ocq_plot)
dev.off()
#load libraries
library(tidyverse)
#read in functions
source("Homebrew/Ns_calc.R")
source("Homebrew/multiplot.R")
#load in data
load("Aging_Models/Family_data_all_locations.rda")
#calculate Ns and making accumulation curves
unique(all_families$newcohort)
##OCQ
#calculate Ns
Ns_tmp <- Ns_calc(subset(all_families,all_families$newcohort == "OCQ16"))
#isolating data to plot
df <- data.frame(sites=Ns_tmp[[1]]$sites,richness=Ns_tmp[[1]]$richness,sd=Ns_tmp[[1]]$sd,stringsAsFactors = F)
reps <- as.data.frame(Ns_tmp[[1]]$perm)
reps1 <- as.data.frame(reps[seq(1, nrow(reps), 10),])
reps1 <- reps1 %>%
mutate(sites=seq(1, nrow(reps), 10)) %>%
select(sites,everything()) %>%
gather(key="rep",value = "richness",-sites)
#plotting data
ocq_plot <- ggplot(df,aes(x=sites,y=richness))+
theme_classic()+
geom_ribbon(aes(ymin=richness-sd,ymax=richness+sd),fill="lightgrey")+
geom_line()+
geom_boxplot(data = reps1,aes(group=sites),outlier.shape = NA)+
geom_hline(yintercept=Ns_tmp[[2]]$chao)+
geom_text(data=data.frame(x=0,y=Ns_tmp[[2]]$chao), aes(x, y), label=paste("Chao estimate = ",round(Ns_tmp[[2]]$chao,digits = 2)),hjust=0, vjust=1.5)+
geom_hline(yintercept=Ns_tmp[[2]]$jack1)+
geom_text(data=data.frame(x=0,y=Ns_tmp[[2]]$jack1), aes(x, y), label=paste("Jackknife estimate = ",round(Ns_tmp[[2]]$jack1,digits = 2)),hjust=0, vjust=-1)+
ylim(0,110)+
xlab("Number of offspring sampled")+
ylab("Number of parent genotypes")+
ggtitle("D) Ocqueoc River")
##BMR
#calculate Ns
Ns_tmp <- Ns_calc(subset(all_families,all_families$newcohort == "BMR_2015"))
View(Ns_tmp)
#libraries
library(tidyverse)
#functions
source("Homebrew/pedigree.plot.R")
##reading in data
#load in data
all_locs <- read.table("Aging_Models/lw_Bayes_assignments.txt",header = T,sep = "\t",stringsAsFactors = F)
#note - BestConfig files were reformatted to be tab delimited and
#special characters in the file were removed prior to load
#identify locations with multiple inferred cohorts
all_locs %>%
group_by(samp) %>%
summarise(nclust=length(unique(clust)),ss=n(),max_len = max(Length))
locs <- c("BMR","CHE","OCQ")
best_config <- data.frame(matrix(ncol=5,nrow = 0))
#read in pedigree data for locations with multiple inferred cohorts
for (i in 1:length(locs)) {
print(i)
df <- readLines(paste0("Software_outputs/",locs[i],"_Output.data.BestCluster"))
#separate file into usable data frame
df <- strsplit(df,"\\s+")
df1 <- matrix(unlist(df),byrow = T)
df1 <- df1[df1 != ""]
df1 <- matrix(df1,ncol = 5,byrow = T)
df1 <- as.data.frame(df1)
colnames(df1) <- df1[1,]
df1 <- df1[-1,]
best_config <- rbind(best_config,df1)
}
#adding ages to model results
df <- merge(best_config,all_locs)
df$full_sib <- paste(df$MotherID,df$FatherID,sep = "_")
##splitting pedigrees by collection and length cluster
#BMR 2018
bmr18.1 <- subset(df,df$samp == "BMR_2018" & df$clust == "clust1")
bmr18.1$cohort <- "2016"
bmr18.2 <- subset(df,df$samp == "BMR_2018" & df$clust == "clust2")
bmr18.2$cohort <- "2015"
bmr18.3 <- subset(df,df$samp == "BMR_2018" & df$clust == "clust3")
bmr18.3$cohort <- "2014"
bmr18 <- rbind(bmr18.1,bmr18.2,bmr18.3)
#BMR 2017
bmr17.1 <- subset(df,df$samp == "BMR_2017" & df$clust == "clust1")
bmr17.1$cohort <- "2016"
bmr17.2 <- subset(df,df$samp == "BMR_2017" & df$clust == "clust2")
bmr17.2$cohort <- "2015"
bmr17 <- rbind(bmr17.1,bmr17.2)
bmr <- rbind(bmr17,bmr18)
bmr19 <- subset(df,df$samp == "BMR_2019")
ocq <- subset(df,df$samp == "OCQ_2018")
che <- subset(df,df$samp == "CHE_2018")
chePR <- che[che$Sample_number < 542 | che$Sample_number == 544,]
##quantifying family relationships across clusters
#BMR 18
#testing overlap
table(bmr18$ClusterIndex)
table(bmr18.1$ClusterIndex%in%bmr18.2$ClusterIndex)
table(bmr18.1$ClusterIndex%in%bmr18.3$ClusterIndex)
table(bmr18.2$ClusterIndex%in%bmr18.3$ClusterIndex)
bmr_sing <- bmr18.1[!(bmr18.1$ClusterIndex %in% bmr18.2$ClusterIndex),]
bmr_sing <- rbind(bmr_sing,bmr18[bmr18$ClusterIndex %in% bmr_sing$ClusterIndex,])
#comparing families
table(bmr18.1$ClusterIndex)
table(bmr18.2$ClusterIndex)
table(bmr18.3$ClusterIndex)
ggplot(bmr18,aes(x=ClusterIndex,y=Length,color=cohort))+
geom_point()+theme_bw()
ggplot(bmr18,aes(x=full_sib,y=Length,color=cohort))+
geom_point()+theme_bw()
#compare full-sibling groups
table(bmr18$full_sib)
table(bmr18.1$full_sib)
table(bmr18.2$full_sib)
table(bmr18.3$full_sib)
table(bmr18.1$full_sib%in%bmr18.2$full_sib)
table(bmr18.1$full_sib%in%bmr18.3$full_sib)
table(bmr18.3$full_sib%in%bmr18.2$full_sib)
#BMR 17
#testing overlap
table(bmr17$ClusterIndex)
table(bmr17.1$ClusterIndex%in%bmr17.2$ClusterIndex)
table(bmr17.2$ClusterIndex%in%bmr17.1$ClusterIndex)
bmr_sing <- bmr17.1[!(bmr17.1$ClusterIndex %in% bmr17.2$ClusterIndex),]
#comparing families
table(bmr17.1$ClusterIndex)
table(bmr17.2$ClusterIndex)
ggplot(bmr17,aes(x=ClusterIndex,y=Length,color=cohort))+
geom_point()+theme_bw()
ggplot(bmr17,aes(x=full_sib,y=Length,color=cohort))+
geom_point()+theme_bw()
#compare full-sibling groups
table(bmr17$full_sib)
table(bmr17.1$full_sib)
table(bmr17.2$full_sib)
table(bmr17.1$full_sib%in%bmr17.2$full_sib)
table(bmr17.2$full_sib%in%bmr17.1$full_sib)
#comparing between collections
table(bmr17.1$ClusterIndex%in%bmr18.1$ClusterIndex)
table(bmr17.1$ClusterIndex%in%bmr18.2$ClusterIndex)
table(bmr17.1$ClusterIndex%in%bmr18.3$ClusterIndex)
bmr_cohort16 <- bmr[which(bmr$ClusterIndex == "2" | bmr$ClusterIndex == "3" | bmr$ClusterIndex == "13"),]
bmr_cohort16$newcohort <- "BMR_2016"
bmr_cohort15 <- bmr[which(!(bmr$OffspringID %in% bmr_cohort16$OffspringID)),]
bmr_cohort15$newcohort <- "BMR_2015"
#combining all locations into one data frame
#!# only chePR individuals are included because the others were not used in the analysis
ocq$newcohort <- "OCQ16"
ocq$cohort <- "2016"
chePR$newcohort <- "chePR"
chePR$cohort <- "2016"
bmr19$newcohort <- "BMRal"
bmr19$cohort <- "2015"
all_families <- rbind(bmr_cohort15,bmr_cohort16,bmr19,chePR,ocq)
##generate the number of full-siblings and the number of clusters in each group
all_families %>%
group_by(newcohort) %>%
summarise(sampsize=n(),
nfullsibs=length(unique(full_sib)),
nclust=length(unique(ClusterIndex)))
##family diagrams
all_families1 <- all_families %>%
select(OffspringID,MotherID,FatherID,ClusterIndex,clust,samp,cohort)
#saving family data
save(all_families,file = "Aging_Models/Family_data_all_locations.rda")
#calculate Ns and making accumulation curves
unique(all_families$newcohort)
##OCQ
#calculate Ns
Ns_tmp <- Ns_calc(subset(all_families,all_families$newcohort == "OCQ16"))
#load libraries
library(tidyverse)
#read in functions
source("Homebrew/Ns_calc.R")
source("Homebrew/multiplot.R")
##OCQ
#calculate Ns
Ns_tmp <- Ns_calc(subset(all_families,all_families$newcohort == "OCQ16"))
#isolating data to plot
df <- data.frame(sites=Ns_tmp[[1]]$sites,richness=Ns_tmp[[1]]$richness,sd=Ns_tmp[[1]]$sd,stringsAsFactors = F)
reps <- as.data.frame(Ns_tmp[[1]]$perm)
reps1 <- as.data.frame(reps[seq(1, nrow(reps), 10),])
reps1 <- reps1 %>%
mutate(sites=seq(1, nrow(reps), 10)) %>%
select(sites,everything()) %>%
gather(key="rep",value = "richness",-sites)
#plotting data
ocq_plot <- ggplot(df,aes(x=sites,y=richness))+
theme_classic()+
geom_ribbon(aes(ymin=richness-sd,ymax=richness+sd),fill="lightgrey")+
geom_line()+
geom_boxplot(data = reps1,aes(group=sites),outlier.shape = NA)+
geom_hline(yintercept=Ns_tmp[[2]]$chao)+
geom_text(data=data.frame(x=0,y=Ns_tmp[[2]]$chao), aes(x, y), label=paste("Chao estimate = ",round(Ns_tmp[[2]]$chao,digits = 2)),hjust=0, vjust=1.5)+
geom_hline(yintercept=Ns_tmp[[2]]$jack1)+
geom_text(data=data.frame(x=0,y=Ns_tmp[[2]]$jack1), aes(x, y), label=paste("Jackknife estimate = ",round(Ns_tmp[[2]]$jack1,digits = 2)),hjust=0, vjust=-1)+
ylim(0,110)+
xlab("Number of offspring sampled")+
ylab("Number of parent genotypes")+
ggtitle("D) Ocqueoc River")
##BMR
#calculate Ns
Ns_tmp <- Ns_calc(subset(all_families,all_families$newcohort == "BMR_2015"))
#isolating data to plot
df <- data.frame(sites=Ns_tmp[[1]]$sites,richness=Ns_tmp[[1]]$richness,sd=Ns_tmp[[1]]$sd,stringsAsFactors = F)
reps <- as.data.frame(Ns_tmp[[1]]$perm)
reps1 <- as.data.frame(reps[seq(1, nrow(reps), 10),])
reps1 <- reps1 %>%
mutate(sites=seq(1, nrow(reps), 10)) %>%
select(sites,everything()) %>%
gather(key="rep",value = "richness",-sites)
#plotting data
bmrbl_plot1 <- ggplot(df,aes(x=sites,y=richness))+
theme_classic()+
geom_ribbon(aes(ymin=richness-sd,ymax=richness+sd),fill="lightgrey")+
geom_line()+
geom_boxplot(data = reps1,aes(group=sites),outlier.shape = NA)+
geom_hline(yintercept=Ns_tmp[[2]]$chao)+
geom_text(data=data.frame(x=0,y=Ns_tmp[[2]]$chao), aes(x, y), label=paste("Chao estimate = ",round(Ns_tmp[[2]]$chao,digits = 2)),hjust=0, vjust=-1)+
geom_hline(yintercept=Ns_tmp[[2]]$jack1)+
geom_text(data=data.frame(x=0,y=Ns_tmp[[2]]$jack1), aes(x, y), label=paste("Jackknife estimate = ",round(Ns_tmp[[2]]$jack1,digits = 2)),hjust=0, vjust=1.5)+
ylim(0,150)+
xlab("Number of offspring sampled")+
ylab("Number of parent genotypes")+
ggtitle("A) Lower Black Mallard - 2015")
#calculate Ns
Ns_tmp <- Ns_calc(subset(all_families,all_families$newcohort == "BMR_2016"))
#isolating data to plot
df <- data.frame(sites=Ns_tmp[[1]]$sites,richness=Ns_tmp[[1]]$richness,sd=Ns_tmp[[1]]$sd,stringsAsFactors = F)
reps <- as.data.frame(Ns_tmp[[1]]$perm)
reps1 <- as.data.frame(reps[seq(1, nrow(reps), 1),])
reps1 <- reps1 %>%
mutate(sites=seq(1, nrow(reps), 1)) %>%
select(sites,everything()) %>%
gather(key="rep",value = "richness",-sites)
#plotting data
bmrbl_plot2 <- ggplot(df,aes(x=sites,y=richness))+
theme_classic()+
geom_ribbon(aes(ymin=richness-sd,ymax=richness+sd),fill="lightgrey")+
geom_line()+
geom_boxplot(data = reps1,aes(group=sites),outlier.shape = NA)+
geom_hline(yintercept=Ns_tmp[[2]]$chao)+
geom_text(data=data.frame(x=0,y=Ns_tmp[[2]]$chao), aes(x, y), label=paste("Chao estimate = ",round(Ns_tmp[[2]]$chao,digits = 2)),hjust=0, vjust=-1.5)+
geom_hline(yintercept=Ns_tmp[[2]]$jack1)+
geom_text(data=data.frame(x=0,y=Ns_tmp[[2]]$jack1), aes(x, y), label=paste("Jackknife estimate = ",round(Ns_tmp[[2]]$jack1,digits = 2)),hjust=0, vjust=1.5)+
ylim(0,30)+
xlab("Number of offspring sampled")+
ylab("Number of parent genotypes")+
ggtitle("B) Lower Black Mallard - 2016")
##chePR
Ns_tmp <- Ns_calc(subset(all_families,all_families$newcohort == "chePR"))
#isolating data to plot
df <- data.frame(sites=Ns_tmp[[1]]$sites,richness=Ns_tmp[[1]]$richness,sd=Ns_tmp[[1]]$sd,stringsAsFactors = F)
reps <- as.data.frame(Ns_tmp[[1]]$perm)
reps1 <- as.data.frame(reps[seq(1, nrow(reps), 1),])
reps1 <- reps1 %>%
mutate(sites=seq(1, nrow(reps), 1)) %>%
select(sites,everything()) %>%
gather(key="rep",value = "richness",-sites)
#plotting data
che_plot <- ggplot(df,aes(x=sites,y=richness))+
theme_classic()+
geom_ribbon(aes(ymin=richness-sd,ymax=richness+sd),fill="lightgrey")+
geom_line()+
geom_boxplot(data = reps1,aes(group=sites),outlier.shape = NA)+
geom_hline(yintercept=Ns_tmp[[2]]$chao)+
geom_text(data=data.frame(x=0,y=Ns_tmp[[2]]$chao), aes(x, y), label=paste("Chao estimate = ",round(Ns_tmp[[2]]$chao,digits = 2)),hjust=0, vjust=-1.5)+
geom_hline(yintercept=Ns_tmp[[2]]$jack1)+
geom_text(data=data.frame(x=0,y=Ns_tmp[[2]]$jack1), aes(x, y), label=paste("Jackknife estimate = ",round(Ns_tmp[[2]]$jack1,digits = 2)),hjust=0, vjust=1.25)+
ylim(0,15)+
xlab("Number of offspring sampled")+
ylab("Number of parent genotypes")+
ggtitle("E) Pigeon River")
##bmrAL
Ns_tmp <- Ns_calc(subset(all_families,all_families$newcohort == "BMRal"))
#isolating data to plot
df <- data.frame(sites=Ns_tmp[[1]]$sites,richness=Ns_tmp[[1]]$richness,sd=Ns_tmp[[1]]$sd,stringsAsFactors = F)
reps <- as.data.frame(Ns_tmp[[1]]$perm)
reps1 <- as.data.frame(reps[seq(1, nrow(reps), 1),])
reps1 <- reps1 %>%
mutate(sites=seq(1, nrow(reps), 1)) %>%
select(sites,everything()) %>%
gather(key="rep",value = "richness",-sites)
#plotting data
bmral_plot <- ggplot(df,aes(x=sites,y=richness))+
theme_classic()+
geom_ribbon(aes(ymin=richness-sd,ymax=richness+sd),fill="lightgrey")+
geom_line()+
geom_boxplot(data = reps1,aes(group=sites),outlier.shape = NA)+
geom_hline(yintercept=Ns_tmp[[2]]$chao)+
geom_text(data=data.frame(x=0,y=Ns_tmp[[2]]$chao), aes(x, y), label=paste("Chao estimate = ",round(Ns_tmp[[2]]$chao,digits = 2)),hjust=0, vjust=1.5)+
geom_hline(yintercept=Ns_tmp[[2]]$jack1)+
geom_text(data=data.frame(x=0,y=Ns_tmp[[2]]$jack1), aes(x, y), label=paste("Jackknife estimate = ",round(Ns_tmp[[2]]$jack1,digits = 2)),hjust=0, vjust=-1)+
ylim(0,20)+
xlab("Number of offspring sampled")+
ylab("Number of parent genotypes")+
ggtitle("C) Upper Black Mallard River")
multiplot(bmrbl_plot1,bmrbl_plot2,bmral_plot,ocq_plot,che_plot,cols = 2)
tiff(filename = "Figures/Ns_extrapolation_plots.tiff",height = 10,width = 10,units = "in",res = 200)
multiplot(bmrbl_plot1,bmrbl_plot2,bmral_plot,ocq_plot,che_plot,cols = 2)
dev.off()
load("/Volumes/MyPassport/Cloned_repositories/NbdLamprey/genlight_pca_che.RData")
load("/Volumes/MyPassport/Cloned_repositories/NbdLamprey/genlight_pca_BMR.RData")
#running PCA analysis
#getting colors
locs <- data.frame(spp=snp@pop,stringsAsFactors = F)
locs <- locs %>%
select(spp)
locs$col <- NA
for(i in 1:length(locs$spp)){
if(locs$spp[i] == "LA"){locs$col[i] <- "blue"}
if(locs$spp[i] == "IF"){locs$col[i] <- "dark green"}
if(locs$spp[i] == "PM"){locs$col[i] <- "purple"}
}
plot(pca$scores[,1], pca$scores[,2],
col=locs$col,cex=0.5)
text(x = 0, y = 0, "P.marinus", pos =4, col = "purple",cex = 0.8)
text(x = 90, y = -40, "I.fosser", pos =1, col = "dark green",cex = 0.8)
text(x = 90, y = 55, "L.appendix", pos =3, col = "blue",cex = 0.8)
title("Supplmental Figure 1A: Black Mallard River")
plot(pca$scores[,1], pca$scores[,2],
col=locs$col,cex=0.5)
load("/Volumes/MyPassport/Cloned_repositories/NbdLamprey/SNPsets/pca_BMR.RData")
plot(pca$scores[,1], pca$scores[,2],
col=locs$col,cex=0.5)
text(x = 0, y = 0, "P.marinus", pos =4, col = "purple",cex = 0.8)
text(x = 90, y = -40, "I.fosser", pos =1, col = "dark green",cex = 0.8)
text(x = 90, y = 55, "L.appendix", pos =3, col = "blue",cex = 0.8)
title("Supplmental Figure 1A: Black Mallard River")
#plot pca
tiff(filename = "Figures/BMR_PCA_plot.tiff",width = 5,height = 5,units = "in",res = 400)
plot(pca$scores[,1], pca$scores[,2],
col=locs$col,cex=0.5)
text(x = 0, y = 0, "P.marinus", pos =4, col = "purple",cex = 0.8)
text(x = 90, y = -40, "I.fossor", pos =1, col = "dark green",cex = 0.8)
text(x = 90, y = 55, "L.appendix", pos =3, col = "blue",cex = 0.8)
title("Supplmental Figure 1A: Black Mallard River")
dev.off()
load("/Volumes/MyPassport/Cloned_repositories/NbdLamprey/SNPsets/pca_ocq.RData")
load("/Volumes/MyPassport/Cloned_repositories/NbdLamprey/genlight_pca_ocq.RData")
#running PCA analysis
#getting colors
locs <- data.frame(spp=snp@pop,stringsAsFactors = F)
locs <- locs %>%
select(spp)
locs$col <- NA
for(i in 1:length(locs$spp)){
if(locs$spp[i] == "LA"){locs$col[i] <- "blue"}
if(locs$spp[i] == "IF"){locs$col[i] <- "dark green"}
if(locs$spp[i] == "PM"){locs$col[i] <- "purple"}
}
#plot pca
tiff(filename = "Figures/OCQ_PCA_plot.tiff",width = 5,height = 5,units = "in",res = 400)
plot(pca$scores[,1], pca$scores[,2],
col=locs$col,cex=0.5)
text(x = 0, y = 0, "P.marinus", pos =4, col = "purple",cex = 0.8)
text(x = 90, y = 50, "I.fossor", pos =1, col = "dark green",cex = 0.8)
text(x = 90, y = -60, "L.appendix", pos =3, col = "blue",cex = 0.8)
title("Supplemental Figure 1B: Ocqueoc River")
dev.off()
load("/Volumes/MyPassport/Cloned_repositories/NbdLamprey/genlight_pca_che.RData")
load("/Volumes/MyPassport/Cloned_repositories/NbdLamprey/SNPsets/pca_che.RData")
#getting colors
locs <- data.frame(spp=snp@pop,stringsAsFactors = F)
locs <- locs %>%
select(spp)
locs$col <- NA
for(i in 1:length(locs$spp)){
if(locs$spp[i] == "LA"){locs$col[i] <- "blue"}
if(locs$spp[i] == "IF"){locs$col[i] <- "dark green"}
if(locs$spp[i] == "PM"){locs$col[i] <- "purple"}
}
#plot pca
tiff(filename = "Figures/CHE_PCA_plot.tiff",width = 5,height = 5,units = "in",res = 400)
plot(pca$scores[,1], pca$scores[,2],
col=locs$col,cex=0.5)
text(x = 0, y = -40, "P.marinus", pos = 2, col = "purple",cex = 0.8)
text(x = -50, y = 25, "I.fosser", pos = 3, col = "dark green",cex = 0.8)
text(x = 100, y = 20, "L.appendix", pos = 2, col = "blue",cex = 0.8)
title("Supplemental Figure 1C: Pigeon River")
dev.off()
